[
   {
      "name": "stand",
      "desc": "add your item and stand in line please :-) [ noodles, beer, eggs, fruit, ]",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 100
   },
   {
      "name": "list",
      "desc": "add to the grocery list ( item + quantity) [ beer: 3, lettuce: 2, soap: 4, ]",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 101
   },
   {
      "name": "unshift",
      "desc": "unshift the previously shifted list [ Coffee, Cherries, Snacks ]",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 102
   },
   {
      "name": "shift",
      "desc": "shift a food item listed [ Eggs, Coffee, Cherries, Snacks ]",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 103
   },
   {
      "name": "pop",
      "desc": "pop a beer that is listed. [ Modelo, Asahi, Kirin, Pacifico ]",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 104
   },
   {
      "name": "push",
      "desc": "Push a beer into the list. [ Modelo, Asahi, Kirin ]",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 105
   },
   {
      "name": "findSecondToLast",
      "desc": "find the second to last letter of the word",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 106
   },
   {
      "name": "findLast",
      "desc": "find the last letter of the word",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 107
   },
   {
      "name": "findFifth",
      "desc": "find the fifth letter of the word",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 108
   },
   {
      "name": "findFirst",
      "desc": "find the first letter of the word",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 109
   },
   {
      "name": "measure",
      "desc": "measure the length of the word",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 110
   },
   {
      "name": "construct",
      "desc": "construct the sentence to your fitting. [My favorite beer is \"___\" , and I love it deeply.]",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 111
   },
   {
      "name": "concatenate",
      "desc": "concatenate the two inputs (using +=)",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 112
   },
   {
      "name": "concatenate",
      "desc": "concatenate the two inputs",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 113
   },
   {
      "name": "multiply",
      "desc": "multiply two decimals together",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 114
   },
   {
      "name": "decrement",
      "desc": "decrease the number by one number",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 115
   },
   {
      "name": "increment",
      "desc": "increase the number by 1",
      "inputs": 1,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 116
   },
   {
      "name": "divide",
      "desc": "divide the first number by the second number",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 117
   },
   {
      "name": "multiply",
      "desc": "multiply two numbers together",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 118
   },
   {
      "name": "subtract",
      "desc": "Subtract the first number from the second number",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 119
   },
   {
      "name": "add",
      "desc": "Add two numbers together",
      "inputs": 2,
      "type": "basic",
      "typeNum": 100,
      "isFavorite": false,
      "order": 120
   },
   {
      "name": "typeOfVariable",
      "desc": "input something and it will tell you what type of varible it is",
      "inputs": 1,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 200
   },
   {
      "name": "checkUsingIndexOf",
      "desc": "put a brand of beer in and see if it is in the list",
      "inputs": 1,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 201
   },
   {
      "name": "addWithSplice",
      "desc": "add numbers from the list using splice. 1, 2, 3, 4, 5, 5, 7, 8, 9",
      "inputs": 3,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 202
   },
   {
      "name": "removeWithSplice",
      "desc": "remove numbers from the list using splice. 1, 2, 3, 4, 5, 6, 7, 8, 9",
      "inputs": 2,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 203
   },
   {
      "name": "generateWholeNumbers",
      "desc": "give a minimun and maximun value and click run to generate a whole number between those values",
      "inputs": 2,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 204
   },
   {
      "name": "lookUpProfile",
      "desc": "Look at the list of name and properties. Find out someones profile by putting in a first name and then a property. NAMES: Tatsuro, Jim, Nat, Sante. PROPERTIES: lastName, number, likes",
      "inputs": 2,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 205
   },
   {
      "name": "countCards",
      "desc": "Hold or Bet depending on the card input",
      "inputs": 1,
      "type": "intermediate",
      "typeNum": 200,
      "isFavorite": false,
      "order": 206
   },
   {
      "name": "checkPositive",
      "desc": "input an array of numbers to see if they contain all positive numbers.",
      "inputs": 1,
      "type": "functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 300
   },
   {
      "name": "urlSlug",
      "desc": "return a hyphenated version of your titles for the URL",
      "inputs": 1,
      "type": "functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 301
   },
   {
      "name": "combineArrayIntoString",
      "desc": "combine contents in an array into a string",
      "inputs": 1,
      "type": "functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 302
   },
   {
      "name": "splitStringIntoArray",
      "desc": "input a string to have it split into an array of words",
      "inputs": 1,
      "type": "functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 303
   },
   {
      "name": "sortAlphabetically",
      "desc": "input a beer and it will sort it alphabetically within the previously used beer list",
      "inputs": 1,
      "type": "functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 304
   },
   {
      "name": "squareArray",
      "desc": "input an array of numbers to have only the positive integers in that array squared",
      "inputs": 1,
      "type": "functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 305
   },
   {
      "name": "getAverageRating",
      "desc": "get average rating of movies for the director inputed (either James Cameron or Christopher Nolan)",
      "inputs": 1,
      "type": "functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 306
   },
   {
      "name": "addWithConcat",
      "desc": "add a beer of your preference to the end of this array of beer names. [kirin, corona, modelo, sapporo, pabst, stella]",
      "inputs": 1,
      "type": "functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 307
   },
   {
      "name": "concatArrays",
      "desc": "input two arrays and add them together using the concat method",
      "inputs": 2,
      "type": "functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 308
   },
   {
      "name": "removeWithSlice",
      "desc": "remove parts of the array of beer with the designated start and end using their index number as reference. [kirin, corona, modelo, sapporo, pabst, stella]",
      "inputs": 2,
      "type": "functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 309
   },
   {
      "name": "sliceArray",
      "desc": "slice the array of animals in the designated start and end using their index number as reference. [ goat, dog, bird, rat, penguin, tiger, elephant, ]",
      "inputs": 2,
      "type": "functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 310
   },
   {
      "name": "implementFilter",
      "desc": "filter out the numbers that are divisble by the input. [2, 4, 7, 23, 64, 534, 7, 45, 265]",
      "inputs": 1,
      "type": "functional",
      "typeNum": 300,
      "isFavorite": false,
      "order": 311
   },
   {
      "name": "chunkyMonkey",
      "desc": "Write a function that splits an array into groups the length of size, and returns them as a two-dimensional array.",
      "inputs": 2,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 400
   },
   {
      "name": "mutations",
      "desc": "Return true if the string in the first element of the array contains all of the letters of the string in the second element of the array.",
      "inputs": 1,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 401
   },
   {
      "name": "whereDoIBelong",
      "desc": "Return the lowest index at which a value (second argument) should be inserted into an array (first argument) once it has been sorted. The returned value should be a number.",
      "inputs": 2,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 402
   },
   {
      "name": "falsyBouncer",
      "desc": "Remove all falsy values from an array.",
      "inputs": 1,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 403
   },
   {
      "name": "sliceAndSplice",
      "desc": "copy each element of the first array into the second array, in order, using the input of \"index\" as the placement at which to add",
      "inputs": 3,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 404
   },
   {
      "name": "titleCase",
      "desc": "Return the inputed string with the first letter of each word capitalized. Make sure the rest of the word is in lower case",
      "inputs": 1,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 405
   },
   {
      "name": "booHoo",
      "desc": "checks if the input is a boolean value.",
      "inputs": 1,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 406
   },
   {
      "name": "findersKeepers",
      "desc": "input an array and return the first number that is even.",
      "inputs": 1,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 407
   },
   {
      "name": "truncateString",
      "desc": "Truncate a string if it is longer than the length inputed.",
      "inputs": 2,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 408
   },
   {
      "name": "repeatStringNumTimes",
      "desc": "repeat a string as many times as inputed",
      "inputs": 2,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 409
   },
   {
      "name": "confirmEndingTarget",
      "desc": "Check if a string ends with the contents inputed",
      "inputs": 2,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 410
   },
   {
      "name": "confirmEndingLetter",
      "desc": "Check if a string ends with the letter inputed",
      "inputs": 2,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 411
   },
   {
      "name": "largestOfFour",
      "desc": "return an array consisting of the largest number from each sub-array. example : [[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]",
      "inputs": 1,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 412
   },
   {
      "name": "findLongestWordLength",
      "desc": "find the length of the longest word in a string.",
      "inputs": 1,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 413
   },
   {
      "name": "factorializeNumber",
      "desc": "factorialize a number.",
      "inputs": 1,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 414
   },
   {
      "name": "reverseString",
      "desc": "reverse a string",
      "inputs": 1,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 415
   },
   {
      "name": "convertCtoF",
      "desc": "convert degreees in celsius to fahrenheit.",
      "inputs": 1,
      "type": "algorithm",
      "typeNum": 400,
      "isFavorite": false,
      "order": 416
   }
]
